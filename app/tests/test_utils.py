import pytest
from app import utils


@pytest.fixture
def mock_historical_data(mocker):
    response_data = {
        'retCode': 0,
        'retMsg': 'OK',
        'result': {
            'symbol': 'SOLUSDT',
            'category': 'linear',
            'list': [
                ['1719338400000', '137.339', '138.616', '137.035', '138.583'],
                ['1719334800000', '137.537', '138.745', '137.273', '137.339'],
                ['1719331200000', '139.439', '139.597', '137.211', '137.537'],
                ['1719327600000', '138.169', '139.891', '137.336', '139.439'],
                ['1719324000000', '136.861', '139.081', '136.673', '138.169'],
                ['1719320400000', '136.728', '137.585', '136.51', '136.861'],
                ['1719316800000', '137.809', '138.185', '136.491', '136.728'],
                ['1719313200000', '138.83', '138.872', '137.208', '137.809'],
                ['1719309600000', '137.056', '139.162', '136.544', '138.83'],
                ['1719306000000', '134.377', '137.623', '134.047', '137.056'],
                ['1719302400000', '134.816', '135.013', '133.494', '134.377'],
                ['1719298800000', '135.999', '136.342', '134.705', '134.816'],
                ['1719295200000', '135.699', '136.208', '135.354', '135.999'],
                ['1719291600000', '136.372', '136.85', '135.418', '135.699'],
                ['1719288000000', '135.793', '136.384', '135.069', '136.372']
            ]
        },
        'retExtInfo': {},
        'time': 1719340199617
    }
    mocker.patch('app.utils.get_historical_data', return_value=response_data)


@pytest.mark.parametrize(
    'expected_rsi, period', [
        (47.15986065490599, 7),
        (45.853208862820196, 9),
        (44.50086161298393, 14),
    ]
)
@pytest.mark.asyncio
async def test_calculate_rsi(mock_historical_data, expected_rsi, period):
    actual_rsi = await utils.calculate_rsi(
        symbol='SOLUSDT',
        interval=60,
        period=period
    )
    assert expected_rsi == actual_rsi
